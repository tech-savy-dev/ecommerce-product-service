version: 0.2

env:
  variables:
    DOMAIN: "ecommerce-domain"
    REPO: "ecommerce-shared"
    REGION: "ap-southeast-1"
    CLUSTER_NAME: "dev-ecommerce-cluster"
    SERVICE_NAME: "ecommerce-product-service"
    TASK_DEF_NAME: "ecommerce-task-family"

phases:
  install:
    runtime-versions:
      java: corretto21
    commands:
      - echo "[INSTALL] Running aws sts get-caller-identity..."
      - aws sts get-caller-identity

      - echo "[INSTALL] Extracting AWS Account ID..."
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

      - echo "[INSTALL] Exporting CodeArtifact auth token..."
      - export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $DOMAIN --domain-owner $AWS_ACCOUNT_ID --region $REGION --query authorizationToken --output text)

      - echo "[INSTALL] Generating Maven settings.xml for CodeArtifact..."
      - mkdir -p ~/.m2
      - |
        cat > ~/.m2/settings.xml <<EOL
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0">
          <mirrors>
            <mirror>
              <id>codeartifact</id>
              <mirrorOf>*</mirrorOf>
              <url>https://${DOMAIN}-${AWS_ACCOUNT_ID}.d.codeartifact.${REGION}.amazonaws.com/maven/${REPO}/</url>
            </mirror>
          </mirrors>
          <servers>
            <server>
              <id>codeartifact</id>
              <username>aws</username>
              <password>${CODEARTIFACT_AUTH_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOL

  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

  build:
    commands:
      - echo Building Maven project with CodeArtifact...
      - mvn clean package -DskipTests -s ~/.m2/settings.xml
      - echo Building Docker image...
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - docker build -t ecommerce-product-service-dev:$IMAGE_TAG .
      - docker tag ecommerce-product-service-dev:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/ecommerce-product-service-dev:$IMAGE_TAG

  post_build:
    commands:
      - echo Pushing Docker image to ECR...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/ecommerce-product-service-dev:$IMAGE_TAG
      - echo "Fetching current ECS task definition..."
      - |
        TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEF_NAME)

      - echo "Creating new ECS task definition with updated image..."
      - |
        NEW_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/ecommerce-product-service-dev:$IMAGE_TAG" '
          {
            family: .taskDefinition.family,
            executionRoleArn: .taskDefinition.executionRoleArn,
            taskRoleArn: .taskDefinition.taskRoleArn,
            networkMode: .taskDefinition.networkMode,
            containerDefinitions: (.taskDefinition.containerDefinitions | map(.image = $IMAGE)),
            requiresCompatibilities: .taskDefinition.requiresCompatibilities,
            cpu: .taskDefinition.cpu,
            memory: .taskDefinition.memory
          }')

      - echo "$NEW_TASK_DEF" > new-task-def.json
      - echo "Registering new task definition..."
      - |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
      - echo "Updating ECS service..."
      - |
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --region $REGION --force-new-deployment

artifacts:
  files:
    - target/*.jar
